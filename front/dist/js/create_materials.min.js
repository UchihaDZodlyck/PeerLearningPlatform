function Materials(){this.progressGroup=$("#progress-group")}Materials.prototype.run=function(){this.initUEditor(),this.listenQiniuUploadFileEvent()},Materials.prototype.listenQiniuUploadFileEvent=function(){var n=this;$("#thumbnail-btn").change(function(){var a=this.files[0];plpajax.get({url:"/news/qntoken/",success:function(e){if(200===e.code){var r=e.data.token,o=(new Date).getTime()+"."+a.name.split(".")[1],i={fname:o,params:{},mimeType:["image/png","image/jpeg","image/gif","video/x-ms-wmv"]},t={useCdnDomain:!0,retryCount:6,region:qiniu.region.as0};qiniu.upload(a,o,r,i,t).subscribe({next:n.handleFileUploadProgress,error:n.handleFileUploadError,complete:n.handleFileUploadComplete})}}})})},Materials.prototype.handleFileUploadProgress=function(e){var r=e.total.percent.toFixed(0)+"%";Materials.progressGroup.show();var o=$(".progress-bar");o.css({width:r}),o.text(r)},Materials.prototype.handleFileUploadError=function(e){window.messageBox.showError(e.message),$("#progress-group").hide(),console.log(e.message)},Materials.prototype.handleFileUploadComplete=function(e){console.log(e),$("#progress-group").hide(),$(".progress-bar").css({width:"0"});var r="http://q9lhhiqcd.sabkt.gdipper.com/"+e.key;$("input[name='thumbnail']").val(r)},Materials.prototype.initUEditor=function(){window.ue=UE.getEditor("editor",{initialFrameHeight:400,serverUrl:"/ueditor/upload/",lang:"en"})},$(function(){(new Materials).run(),Materials.progressGroup=$("#progress-group")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZV9tYXRlcmlhbHMuanMiXSwibmFtZXMiOlsiTWF0ZXJpYWxzIiwidGhpcyIsInByb2dyZXNzR3JvdXAiLCIkIiwicHJvdG90eXBlIiwicnVuIiwiaW5pdFVFZGl0b3IiLCJsaXN0ZW5RaW5pdVVwbG9hZEZpbGVFdmVudCIsInNlbGYiLCJjaGFuZ2UiLCJmaWxlIiwiZmlsZXMiLCJwbHBhamF4IiwiZ2V0IiwidXJsIiwic3VjY2VzcyIsInJlc3VsdCIsInRva2VuIiwia2V5IiwiRGF0ZSIsImdldFRpbWUiLCJuYW1lIiwic3BsaXQiLCJwdXRFeHRyYSIsImZuYW1lIiwicGFyYW1zIiwibWltZVR5cGUiLCJjb25maWciLCJ1c2VDZG5Eb21haW4iLCJyZXRyeUNvdW50IiwicmVnaW9uIiwicWluaXUiLCJhczAiLCJ1cGxvYWQiLCJzdWJzY3JpYmUiLCJuZXh0IiwiaGFuZGxlRmlsZVVwbG9hZFByb2dyZXNzIiwiZXJyb3IiLCJoYW5kbGVGaWxlVXBsb2FkRXJyb3IiLCJjb21wbGV0ZSIsImhhbmRsZUZpbGVVcGxvYWRDb21wbGV0ZSIsInJlc3BvbnNlIiwicGVyY2VudFRleHQiLCJ0b3RhbCIsInBlcmNlbnQiLCJ0b0ZpeGVkIiwic2hvdyIsInByb2dyZXNzQmFyIiwiY3NzIiwid2lkdGgiLCJ0ZXh0Iiwid2luZG93IiwibWVzc2FnZUJveCIsInNob3dFcnJvciIsIm1lc3NhZ2UiLCJoaWRlIiwiY29uc29sZSIsImxvZyIsInZhbCIsInVlIiwiVUUiLCJnZXRFZGl0b3IiLCJpbml0aWFsRnJhbWVIZWlnaHQiLCJzZXJ2ZXJVcmwiLCJsYW5nIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxZQUNKQyxLQUFLQyxjQUFnQkMsRUFBRSxtQkFJNUJILFVBQVVJLFVBQVVDLElBQU0sV0FDWEosS0FDTkssY0FETUwsS0FFTk0sOEJBR1RQLFVBQVVJLFVBQVVHLDJCQUE2QixXQUM3QyxJQUFJQyxFQUFPUCxLQUNLRSxFQUFFLGtCQUNSTSxPQUFPLFdBQ2IsSUFBSUMsRUFBT1QsS0FBS1UsTUFBTSxHQUN0QkMsUUFBUUMsSUFBSSxDQUNSQyxJQUFPLGlCQUNQQyxRQUFXLFNBQVVDLEdBQ2pCLEdBQXNCLE1BQW5CQSxFQUFhLEtBQVUsQ0FDdEIsSUFBSUMsRUFBUUQsRUFBYSxLQUFTLE1BQzlCRSxHQUFNLElBQUtDLE1BQVFDLFVBQVksSUFBTVYsRUFBS1csS0FBS0MsTUFBTSxLQUFLLEdBQzFEQyxFQUFXLENBQ1hDLE1BQU9OLEVBQ1BPLE9BQU8sR0FDUEMsU0FBVSxDQUFDLFlBQVksYUFBYSxZQUFZLG1CQUVoREMsRUFBUyxDQUNUQyxjQUFjLEVBQ2RDLFdBQVksRUFDWkMsT0FBUUMsTUFBTUQsT0FBT0UsS0FFUkQsTUFBTUUsT0FBT3ZCLEVBQUtRLEVBQUlELEVBQU1NLEVBQVNJLEdBQzNDTyxVQUFVLENBQ2pCQyxLQUFRM0IsRUFBSzRCLHlCQUNiQyxNQUFTN0IsRUFBSzhCLHNCQUNkQyxTQUFZL0IsRUFBS2dDLGtDQVV6Q3hDLFVBQVVJLFVBQVVnQyx5QkFBMkIsU0FBVUssR0FDckQsSUFFSUMsRUFGUUQsRUFBU0UsTUFDREMsUUFDTUMsUUFBUSxHQUFHLElBRWpCN0MsVUFBVUUsY0FDaEI0QyxPQUNkLElBQUlDLEVBQWM1QyxFQUFFLGlCQUNwQjRDLEVBQVlDLElBQUksQ0FBQ0MsTUFBUVAsSUFDekJLLEVBQVlHLEtBQUtSLElBR3JCMUMsVUFBVUksVUFBVWtDLHNCQUF3QixTQUFVRCxHQUNsRGMsT0FBT0MsV0FBV0MsVUFBVWhCLEVBQU1pQixTQUNkbkQsRUFBRSxtQkFDUm9ELE9BQ2RDLFFBQVFDLElBQUlwQixFQUFNaUIsVUFHdEJ0RCxVQUFVSSxVQUFVb0MseUJBQTJCLFNBQVVDLEdBQ3JEZSxRQUFRQyxJQUFJaEIsR0FDUXRDLEVBQUUsbUJBQ1JvRCxPQUNJcEQsRUFBRSxpQkFDUjZDLElBQUksQ0FBQ0MsTUFBUSxNQUN6QixJQUVJbkMsRUFGUyxzQ0FDRTJCLEVBQVN2QixJQUVIZixFQUFFLDJCQUNSdUQsSUFBSTVDLElBTXZCZCxVQUFVSSxVQUFVRSxZQUFjLFdBQzlCNkMsT0FBT1EsR0FBS0MsR0FBR0MsVUFBVSxTQUFTLENBQzlCQyxtQkFBc0IsSUFDdEJDLFVBQWEsbUJBQ2JDLEtBQVEsUUFNaEI3RCxFQUFFLFlBQ2tCLElBQUlILFdBQ1ZLLE1BQ1ZMLFVBQVVFLGNBQWdCQyxFQUFFIiwiZmlsZSI6ImNyZWF0ZV9tYXRlcmlhbHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gTWF0ZXJpYWxzKCkge1xyXG4gICAgIHRoaXMucHJvZ3Jlc3NHcm91cCA9ICQoXCIjcHJvZ3Jlc3MtZ3JvdXBcIik7XHJcbn1cclxuXHJcblxyXG5NYXRlcmlhbHMucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuaW5pdFVFZGl0b3IoKTtcclxuICAgIHNlbGYubGlzdGVuUWluaXVVcGxvYWRGaWxlRXZlbnQoKTtcclxufVxyXG5cclxuTWF0ZXJpYWxzLnByb3RvdHlwZS5saXN0ZW5RaW5pdVVwbG9hZEZpbGVFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciB1cGxvYWRCdG4gPSAkKCcjdGh1bWJuYWlsLWJ0bicpO1xyXG4gICAgdXBsb2FkQnRuLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZpbGUgPSB0aGlzLmZpbGVzWzBdO1xyXG4gICAgICAgIHBscGFqYXguZ2V0KHtcclxuICAgICAgICAgICAgJ3VybCc6ICcvbmV3cy9xbnRva2VuLycsXHJcbiAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYocmVzdWx0Wydjb2RlJ10gPT09IDIwMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gcmVzdWx0WydkYXRhJ11bJ3Rva2VuJ107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgKyAnLicgKyBmaWxlLm5hbWUuc3BsaXQoJy4nKVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHV0RXh0cmEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuYW1lOiBrZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczp7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWltZVR5cGU6IFsnaW1hZ2UvcG5nJywnaW1hZ2UvanBlZycsJ2ltYWdlL2dpZicsJ3ZpZGVvL3gtbXMtd212J11cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZUNkbkRvbWFpbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlDb3VudDogNixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiBxaW5pdS5yZWdpb24uYXMwXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IHFpbml1LnVwbG9hZChmaWxlLGtleSx0b2tlbixwdXRFeHRyYSxjb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuc3Vic2NyaWJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQnOiBzZWxmLmhhbmRsZUZpbGVVcGxvYWRQcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yJzogc2VsZi5oYW5kbGVGaWxlVXBsb2FkRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb21wbGV0ZSc6IHNlbGYuaGFuZGxlRmlsZVVwbG9hZENvbXBsZXRlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuXHJcblxyXG5NYXRlcmlhbHMucHJvdG90eXBlLmhhbmRsZUZpbGVVcGxvYWRQcm9ncmVzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgdmFyIHRvdGFsID0gcmVzcG9uc2UudG90YWw7XHJcbiAgICB2YXIgcGVyY2VudCA9IHRvdGFsLnBlcmNlbnQ7XHJcbiAgICB2YXIgcGVyY2VudFRleHQgPSBwZXJjZW50LnRvRml4ZWQoMCkrJyUnO1xyXG4gICAgLy8gMjQuMDkwOe+8jDg5LjAwMC4uLi5cclxuICAgIHZhciBwcm9ncmVzc0dyb3VwID0gTWF0ZXJpYWxzLnByb2dyZXNzR3JvdXA7XHJcbiAgICBwcm9ncmVzc0dyb3VwLnNob3coKTtcclxuICAgIHZhciBwcm9ncmVzc0JhciA9ICQoXCIucHJvZ3Jlc3MtYmFyXCIpO1xyXG4gICAgcHJvZ3Jlc3NCYXIuY3NzKHtcIndpZHRoXCI6cGVyY2VudFRleHR9KTtcclxuICAgIHByb2dyZXNzQmFyLnRleHQocGVyY2VudFRleHQpO1xyXG59O1xyXG5cclxuTWF0ZXJpYWxzLnByb3RvdHlwZS5oYW5kbGVGaWxlVXBsb2FkRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgIHdpbmRvdy5tZXNzYWdlQm94LnNob3dFcnJvcihlcnJvci5tZXNzYWdlKTtcclxuICAgIHZhciBwcm9ncmVzc0dyb3VwID0gJChcIiNwcm9ncmVzcy1ncm91cFwiKTtcclxuICAgIHByb2dyZXNzR3JvdXAuaGlkZSgpO1xyXG4gICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XHJcbn07XHJcblxyXG5NYXRlcmlhbHMucHJvdG90eXBlLmhhbmRsZUZpbGVVcGxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgdmFyIHByb2dyZXNzR3JvdXAgPSAkKFwiI3Byb2dyZXNzLWdyb3VwXCIpO1xyXG4gICAgcHJvZ3Jlc3NHcm91cC5oaWRlKCk7XHJcbiAgICB2YXIgcHJvZ3Jlc3NCYXIgPSAkKFwiLnByb2dyZXNzLWJhclwiKTtcclxuICAgIHByb2dyZXNzQmFyLmNzcyh7XCJ3aWR0aFwiOicwJ30pO1xyXG4gICAgdmFyIGRvbWFpbiA9ICdodHRwOi8vcTlsaGhpcWNkLnNhYmt0LmdkaXBwZXIuY29tLyc7XHJcbiAgICB2YXIgZmlsZW5hbWUgPSByZXNwb25zZS5rZXk7XHJcbiAgICB2YXIgdXJsID0gZG9tYWluICsgZmlsZW5hbWU7XHJcbiAgICB2YXIgdGh1bWJuYWlsSW5wdXQgPSAkKFwiaW5wdXRbbmFtZT0ndGh1bWJuYWlsJ11cIik7XHJcbiAgICB0aHVtYm5haWxJbnB1dC52YWwodXJsKTtcclxuXHJcbn07XHJcblxyXG5cclxuXHJcbk1hdGVyaWFscy5wcm90b3R5cGUuaW5pdFVFZGl0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB3aW5kb3cudWUgPSBVRS5nZXRFZGl0b3IoJ2VkaXRvcicse1xyXG4gICAgICAgICdpbml0aWFsRnJhbWVIZWlnaHQnOiA0MDAsXHJcbiAgICAgICAgJ3NlcnZlclVybCc6ICcvdWVkaXRvci91cGxvYWQvJyxcclxuICAgICAgICAnbGFuZyc6ICdlbicsXHJcblxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbWF0ZXJpYWxzID0gbmV3IE1hdGVyaWFscygpO1xyXG4gICAgbWF0ZXJpYWxzLnJ1bigpO1xyXG4gICAgTWF0ZXJpYWxzLnByb2dyZXNzR3JvdXAgPSAkKCcjcHJvZ3Jlc3MtZ3JvdXAnKTtcclxufSk7Il19
