function Banner(){this.viewportWidth=735,this.BannerViewport=$("#viewport"),this.index=1,this.bannerUL=$("#banner-ul"),this.liList=this.bannerUL.children("li"),this.liCount=this.liList.length,this.leftArrow=$(".left-arrow"),this.rightArrow=$(".right-arrow"),this.bannerControl=$(".banner-control")}function Index(){var n=this;n.page=2,n.category_id=0,n.loadBtn=$("#load-more-btn")}Banner.prototype.initBanner=function(){var n=this,t=n.liList.eq(0).clone(),e=n.liList.eq(n.liCount-1).clone();n.bannerUL.append(t),n.bannerUL.prepend(e),n.bannerUL.css({width:n.viewportWidth*(n.liCount+2),left:-n.viewportWidth})},Banner.prototype.initBannerControl=function(){for(var n=this,t=0;t<n.liCount;t++){var e=$("<li></li>");n.bannerControl.append(e),0===t&&e.addClass("active")}n.bannerControl.css({width:12*n.liCount+4+4*(n.liCount-1)})},Banner.prototype.animate=function(){var n=this;n.bannerUL.stop().animate({left:-n.viewportWidth*n.index},500);var t=n.index;t=0===t?n.liCount-1:t===n.liCount+1?0:n.index-1,n.bannerControl.children("li").eq(t).addClass("active").siblings().removeClass("active")},Banner.prototype.toggleArrow=function(n){var t=this;1==n?(t.leftArrow.show(),t.rightArrow.show()):(t.leftArrow.hide(),t.rightArrow.hide())},Banner.prototype.looping=function(){var n=this;n.timer=setInterval(function(){n.index>=n.liCount+1?(n.bannerUL.css({left:-n.viewportWidth}),n.index=2):n.index++,n.animate()},3e3)},Banner.prototype.ListenHoverBannerControl=function(){var e=this;e.bannerControl.children("li").each(function(n,t){$(t).hover(function(){e.index=n+1,e.animate(),clearInterval(e.timer)},function(){e.looping()})})},Banner.prototype.ListenClickArrow=function(){var n=this;n.leftArrow.click(function(){0===n.index?(n.bannerUL.css({left:-n.viewportWidth*n.liCount}),n.index=n.liCount-1):n.index--,n.animate()}),n.rightArrow.click(function(){n.index===n.liCount+1?(n.bannerUL.css({left:-n.viewportWidth}),n.index=2):n.index++,n.animate()})},Banner.prototype.listenBannerHover=function(){var n=this;this.BannerViewport.hover(function(){clearInterval(n.timer),n.toggleArrow(!0)},function(){n.looping(),n.toggleArrow(!1)})},Banner.prototype.run=function(){this.initBanner(),this.initBannerControl(),this.looping(),this.ListenClickArrow(),this.listenBannerHover(),this.ListenHoverBannerControl()},Index.prototype.listenLoadMoreEvent=function(){var i=this,r=$("#load-more-btn");r.click(function(){plpajax.get({url:"/news/list/",data:{p:i.page,category_id:i.category_id},success:function(n){if(200===n.code){var t=n.data;if(0<t.length){var e=template("news-item",{newses:t});$(".list-inner-group").append(e),i.page+=1}else r.hide()}}})})},Index.prototype.listenCategorySwitchEvent=function(){var a=this;$(".list-tab").children().click(function(){var r=$(this),o=r.attr("data-category");plpajax.get({url:"/news/list/",data:{category_id:o,p:1},success:function(n){if(200===n.code){var t=n.data,e=template("news-item",{newses:t}),i=$(".list-inner-group");i.empty(),i.append(e),a.page=2,a.category_id=o,r.addClass("active").siblings().removeClass("active"),a.loadBtn.show()}}})})},Index.prototype.run=function(){this.listenLoadMoreEvent(),this.listenCategorySwitchEvent()},$(function(){(new Banner).run(),(new Index).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
